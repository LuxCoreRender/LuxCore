### Release v2.6

### New Features

* BIDIRCPU can now use PhotonGI caustic cache to render SDS paths
* Optimized the parsing of mesh light sources and it is now about 3x faster
* Introduced (partial) multi-thread support in pre-processing of Light sources
* Integrated OpenColorIO v2.0
* Added the support for new TONEMAP_OPENCOLORIO tone mapper
* Added the support for color spaces (Nop, LuxCore and OpenColorIO) to image maps
* Added the support for color spaces (Nop, LuxCore and OpenColorIO) to constant textures
* Added the support for color spaces (Nop, LuxCore and OpenColorIO) to implicit definitions of constant textures
* Added the support for color spaces (Nop, LuxCore and OpenColorIO) to materials
* Added the support for color spaces (Nop, LuxCore and OpenColorIO) to light sources
* FILESAVER avoids to save the internal random image map (used by randomized tiling)
* Updated to Intel Embree v3.12.2
* Updated to Intel OIDN v1.3.0
* Updated to OpenImageIO v2.2.13.1
* Regularize coordinate system to solve some anisotropic related issue with glossy material (pull request #521)
* UVRandomMapping2D now supports optional random rotation step parameter (issue #528)
* LocalRandomMapping3D now supports optional random rotation step parameter (issue #528)
* Introduced the concept of Scene texture image maps resize policy and the support for NONE and FIXED policies
* Reworked the way alpha channel is computed for transmitted paths
* Introduced the MINMEM Scene texture image maps resize policy
* Updated to Intel OIDN v1.4.0
* Added the support for Intel OIDN auxiliary buffers pre-filtering
* Added the support for new pyluxcoretools MakeTX
* Introduced the MIPMAPMEM Scene texture image maps resize policy
* GPU out-of-core rendering now automatically disable Film GPU image pipeline to save more memory
* Added the support for Film-only out-of-core rendering (CUDA-only) with property opencl.outofcore.film.enable
* Added a safety check for infinite light source when HDR with invalid values (NaN, Inf, etc.) is used
* Added the support to Intel OIDN plugin for enabling/disabling prefiltering with .prefilter.enable property
* Disney glossiness evaluation (for PGI, Albedo AOV, etc.) now checks metal and specular parameters
* Disney glossiness evaluation uses now the square root of the value to align with the roughness of Glossy2, Metal, etc.
* Added the support for image map filtering nearest, linear was the only mode available before (issue #545)
* Albedo AOV reflections and transmissions can now be configured (mostly for denoising)
* Avg. Shading Normal AOV is now coherent with Albedo AOV reflections and transmissions settings
* Intel OIDN plugin now pre-filters Avg. Shading Normal AOV too
* Added the support for Albedo and Normal AOV warmup for improved denoising with BIDIRCPU
* Added the support for camera projection UV shape
* Added the support for OpenColorIO Looks to TONEMAP_OPENCOLORIO color space mode
* Added the support for OpenColorIO Looks to TONEMAP_OPENCOLORIO display mode
* It is now possible to set the light source volume like with camera (for BiDir)

### Fixed Bugs

* Fixed the reading of IES files on system with not-US locale
* Fixed a problem with Python and Property objects initialized as double even if they were int
* Python Property object now consider int data type always as a 64 bit value
* Fixed a bug rendering black baked maps when using bump mapping and COMBINED type with BAKECPU rendering engine
* Fixed a bug when rendering caustics over volumes with Caustic cache (issue #533)
* Fixed a problem causing the initialization of multiple dataset accelerators in some case
* Fixed a problem with incorrect alpha AOV values (issue #536)
* Fixed a problem when using Add/Subtract textures with bump mapping (issue #689)
* GlossyCoating is now a delta material if the base material is
* Fixed a crash when editing light source emission
* Added a work around to pyluxcoretools with PySide2 causing a std::bad_cast
* Fixed a possible crash when editing a scene
* Fixed glTF export to work with Python base64.b64decode()
* Fixed a bug in Disney material causing bright edges
* Fixed a problem with not-NULL transparent surfaces when the interior and the exterior volumes are the same
* Fixed a cut&paste error in ImageMapStorage::GetDuv() (issue #560)
* Fixed a problem with indirect light going trough objects with white shadow transparency in BIDIRCPU
* Fixed a possible crash when editing a scene

### Fixed Bugs in v2.6.1

* Fixed pysideluxcoredemo.py sample
* Fixed a bug in BIDIRCPU when using shadow transparency (issue #576)
* Workaround to broken NumPy included in Blender v3.0
* Introduced Scene:DeleteObjects() and Scene::DeleteLights() methods
* Optimized Scene:DeleteObjects() method
* Fixed a problem with infinite lights, BiDir and shadow transparent materials

Check https://wiki.luxcorerender.org/LuxCoreRender_Release_Notes for the full list
of release notes.

### Known Problems and limitations

* accelerator.bvh.builder.type = EMBREE_MORTON doesn't work with the latest Embree
* Python crashes when calling sys.exit()
* TILEPATHOCL (and RTPATHOCL) count the layers of transparent surfaces as an iteration of the rendering finite state machine so they require to increase the max. path depth to avoid black regions.
* Light emitted by motion blurred triangle lights is approximated using the triangle area of time 0.0 (computing triangle area at runtime would be expansive) so it may be not totally accurate if the motion blur transformation include a scale.

**Note for Windows users:** you have to install the [Microsoft Visual C++ Redistributable
for Visual Studio 2017](https://aka.ms/vs/15/release/vc_redist.x64.exe) and
[Intel C++ redistributable](https://software.intel.com/sites/default/files/managed/59/aa/ww_icl_redist_msi_2018.3.210.zip).
