#include <string>
namespace luxrays { namespace ocl {
std::string KernelSource_epsilon_types = 
"#line 2 \"epsilon_types.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2015 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"// NOTE: DEFAULT_EPSILON_MIN is very small. A plane passing exactly for the\n"
"// origin will suffer of self shadow problems because the Ray class will use\n"
"// MachineEpsilon(ray.o) as epsilon for the ray.mint. However it is pretty much\n"
"// the only case where there is a problem so better to not change anything.\n"
"// As workaround, moving the plane away from the origin is enough.\n"
"#define DEFAULT_EPSILON_MIN 1e-9f\n"
"#define DEFAULT_EPSILON_MAX 1e-1f\n"
"#define DEFAULT_EPSILON_STATIC 1e-5f\n"
"\n"
"// An epsilon that can be used as threshold for cos(theta). For instance:\n"
"// if (Dot(N, LightDir) < DEFAULT_COS_EPSILON_STATIC) return Spectrum();\n"
"#define DEFAULT_COS_EPSILON_STATIC 1e-4f\n"
"\n"
"// This is about 1e-5f for values near 1.f\n"
"#define DEFAULT_EPSILON_DISTANCE_FROM_VALUE 0x80u\n"
; } }
