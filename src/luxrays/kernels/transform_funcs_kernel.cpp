#include <string>
namespace luxrays { namespace ocl {
std::string KernelSource_transform_funcs = 
"#line 2 \"transform_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2015 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"float3 Transform_ApplyPoint(__global const Transform* restrict trans, const float3 point) {\n"
"	return Matrix4x4_ApplyPoint(&trans->m, point);\n"
"}\n"
"\n"
"float3 Transform_ApplyVector(__global const Transform* restrict trans, const float3 vector) {\n"
"	return Matrix4x4_ApplyVector(&trans->m, vector);\n"
"}\n"
"\n"
"float3 Transform_ApplyNormal(__global const Transform* restrict trans, const float3 normal) {\n"
"	return Matrix4x4_ApplyNormal(&trans->m, normal);\n"
"}\n"
"\n"
"float3 Transform_InvApplyPoint(__global const Transform* restrict trans, const float3 point) {\n"
"	return Matrix4x4_ApplyPoint(&trans->mInv, point);\n"
"}\n"
"\n"
"float3 Transform_InvApplyVector(__global const Transform* restrict trans, const float3 vector) {\n"
"	return Matrix4x4_ApplyVector(&trans->mInv, vector);\n"
"}\n"
"\n"
"float3 Transform_InvApplyNormal(__global const Transform* restrict trans, const float3 normal) {\n"
"	return Matrix4x4_ApplyNormal(&trans->mInv, normal);\n"
"}\n"
; } }
