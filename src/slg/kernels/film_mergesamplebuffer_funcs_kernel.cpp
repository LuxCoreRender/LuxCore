#include <string>
namespace slg { namespace ocl {
std::string KernelSource_film_mergesamplebuffer_funcs = 
"#line 2 \"film_mergesamplebuffer_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2015 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Film_ClearMergeBuffer \n"
"//------------------------------------------------------------------------------\n"
"\n"
"__kernel __attribute__((work_group_size_hint(256, 1, 1))) void Film_ClearMergeBuffer(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global uint *channel_FRAMEBUFFER_MASK) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid > filmWidth * filmHeight)\n"
"		return;\n"
"\n"
"	channel_FRAMEBUFFER_MASK[gid] = 0;\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Film_MergeRADIANCE_PER_PIXEL_NORMALIZED \n"
"//------------------------------------------------------------------------------\n"
"\n"
"__kernel __attribute__((work_group_size_hint(256, 1, 1))) void Film_MergeRADIANCE_PER_PIXEL_NORMALIZED(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global float *channel_RGB_TONEMAPPED,\n"
"		__global uint *channel_FRAMEBUFFER_MASK,\n"
"		__global float *mergeBuffer,\n"
"		const float scaleR, const float scaleG, const float scaleB) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid > filmWidth * filmHeight)\n"
"		return;\n"
"\n"
"	__global const float *mergeBufferPixel = &mergeBuffer[gid * 4];\n"
"	float r = mergeBufferPixel[0];\n"
"	float g = mergeBufferPixel[1];\n"
"	float b = mergeBufferPixel[2];\n"
"	const float w = mergeBufferPixel[3];\n"
"\n"
"	if (w > 0.f) {\n"
"		const float iw = 1.f / w;\n"
"		r *= iw;\n"
"		g *= iw;\n"
"		b *= iw;\n"
"\n"
"		r *= scaleR;\n"
"		g *= scaleG;\n"
"		b *= scaleB;\n"
"\n"
"		__global uint *mask = &channel_FRAMEBUFFER_MASK[gid];\n"
"\n"
"		__global float *channelBufferPixel = &channel_RGB_TONEMAPPED[gid * 3];\n"
"		if (*mask) {\n"
"			channelBufferPixel[0] += r;\n"
"			channelBufferPixel[1] += g;\n"
"			channelBufferPixel[2] += b;\n"
"		} else {\n"
"			channelBufferPixel[0] = r;\n"
"			channelBufferPixel[1] = g;\n"
"			channelBufferPixel[2] = b;			\n"
"		}\n"
"\n"
"		*mask = 1;\n"
"	}\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Film_MergeRADIANCE_PER_SCREEN_NORMALIZED \n"
"//------------------------------------------------------------------------------\n"
"\n"
"__kernel __attribute__((work_group_size_hint(256, 1, 1))) void Film_MergeRADIANCE_PER_SCREEN_NORMALIZED(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global float *channel_RGB_TONEMAPPED,\n"
"		__global uint *channel_FRAMEBUFFER_MASK,\n"
"		__global float *mergeBuffer,\n"
"		const float scaleR, const float scaleG, const float scaleB) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid > filmWidth * filmHeight)\n"
"		return;\n"
"\n"
"	__global const float *mergeBufferPixel = &mergeBuffer[gid * 3];\n"
"	float r = mergeBufferPixel[0];\n"
"	float g = mergeBufferPixel[1];\n"
"	float b = mergeBufferPixel[2];\n"
"\n"
"	if ((r != 0.f) || (g != 0.f) || (b != 0.f)) {\n"
"		r *= scaleR;\n"
"		g *= scaleG;\n"
"		b *= scaleB;\n"
"\n"
"		__global uint *mask = &channel_FRAMEBUFFER_MASK[gid];\n"
"\n"
"		__global float *channelBufferPixel = &channel_RGB_TONEMAPPED[gid * 3];\n"
"		if (*mask) {\n"
"			channelBufferPixel[0] += r;\n"
"			channelBufferPixel[1] += g;\n"
"			channelBufferPixel[2] += b;\n"
"		} else {\n"
"			channelBufferPixel[0] = r;\n"
"			channelBufferPixel[1] = g;\n"
"			channelBufferPixel[2] = b;			\n"
"		}\n"
"\n"
"		*mask = 1;\n"
"	}\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Film_MergeRADIANCE_PER_SCREEN_NORMALIZED \n"
"//------------------------------------------------------------------------------\n"
"\n"
"__kernel __attribute__((work_group_size_hint(256, 1, 1))) void Film_NotOverlappedScreenBufferUpdate(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global float *channel_RGB_TONEMAPPED,\n"
"		__global uint *channel_FRAMEBUFFER_MASK) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid > filmWidth * filmHeight)\n"
"		return;\n"
"\n"
"	__global float *channelBufferPixel = &channel_RGB_TONEMAPPED[gid * 3];\n"
"	__global uint *mask = &channel_FRAMEBUFFER_MASK[gid];\n"
"	if (!(*mask)) {\n"
"		channelBufferPixel[0] = 0.f;\n"
"		channelBufferPixel[1] = 0.f;\n"
"		channelBufferPixel[2] = 0.f;			\n"
"	}\n"
"}\n"
; } }
