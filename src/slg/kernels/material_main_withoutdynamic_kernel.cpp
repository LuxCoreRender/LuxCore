#include <string>
namespace slg { namespace ocl {
std::string KernelSource_material_main_withoutdynamic = 
"#line 2 \"material_main_withoutdynamic.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2015 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Generic material functions\n"
"//\n"
"// They include the support for all material but one requiring dynamic code\n"
"// generation like Mix (because OpenCL doesn't support recursion)\n"
"//------------------------------------------------------------------------------\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Material_GetEventTypes\n"
"//------------------------------------------------------------------------------\n"
"\n"
"BSDFEvent Material_GetEventTypesWithoutDynamic(__global const Material *material) {\n"
"	switch (material->type) {\n"
"#if defined (PARAM_ENABLE_MAT_MATTE)\n"
"		case MATTE:\n"
"			return MatteMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_MIRROR)\n"
"		case MIRROR:\n"
"			return MirrorMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_GLASS)\n"
"		case GLASS:\n"
"			return GlassMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_ARCHGLASS)\n"
"		case ARCHGLASS:\n"
"			return ArchGlassMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_NULL)\n"
"		case NULLMAT:\n"
"			return NullMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_MATTETRANSLUCENT)\n"
"		case MATTETRANSLUCENT:\n"
"			return MatteTranslucentMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_GLOSSY2)\n"
"		case GLOSSY2:\n"
"			return Glossy2Material_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_METAL2)\n"
"		case METAL2:\n"
"			return Metal2Material_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_ROUGHGLASS)\n"
"		case ROUGHGLASS:\n"
"			return RoughGlassMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_VELVET)\n"
"		case VELVET:\n"
"			return VelvetMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_CLOTH)\n"
"		case CLOTH:\n"
"			return ClothMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_CARPAINT)\n"
"		case CARPAINT:\n"
"			return CarPaintMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_ROUGHMATTE)\n"
"		case ROUGHMATTE:\n"
"			return RoughMatteMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_ROUGHMATTETRANSLUCENT)\n"
"		case ROUGHMATTETRANSLUCENT:\n"
"			return RoughMatteTranslucentMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_GLOSSYTRANSLUCENT)\n"
"		case GLOSSYTRANSLUCENT:\n"
"			return GlossyTranslucentMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_HOMOGENEOUS_VOL)\n"
"		case HOMOGENEOUS_VOL:\n"
"			return HomogeneousVolMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_CLEAR_VOL)\n"
"		case CLEAR_VOL:\n"
"			return ClearVolMaterial_GetEventTypes();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_HETEROGENEOUS_VOL)\n"
"		case HETEROGENEOUS_VOL:\n"
"			return HeterogeneousVolMaterial_GetEventTypes();\n"
"#endif\n"
"		default:\n"
"			// Something has gone very wrong\n"
"			return DIFFUSE | REFLECT;\n"
"	}\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Material_IsDeltaWithoutDynamic\n"
"//------------------------------------------------------------------------------\n"
"\n"
"bool Material_IsDeltaWithoutDynamic(__global const Material *material) {\n"
"	switch (material->type) {\n"
"#if defined (PARAM_ENABLE_MAT_ARCHGLASS)\n"
"		case ARCHGLASS:\n"
"			return ArchGlassMaterial_IsDelta();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_GLASS)\n"
"		case GLASS:\n"
"			return GlassMaterial_IsDelta();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_MIRROR)\n"
"		case MIRROR:\n"
"			return MirrorMaterial_IsDelta();\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_NULL)\n"
"		case NULLMAT:\n"
"			return NullMaterial_IsDelta();\n"
"#endif\n"
"		default:\n"
"			return DefaultMaterial_IsDelta();\n"
"	}\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Material_GetPassThroughTransparencyWithoutDynamic\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"float3 Material_GetPassThroughTransparencyWithoutDynamic(__global const Material *material, __global HitPoint *hitPoint,\n"
"		const float3 localFixedDir, const float passThroughEvent\n"
"		MATERIALS_PARAM_DECL) {\n"
"	switch (material->type) {\n"
"#if defined (PARAM_ENABLE_MAT_ARCHGLASS)\n"
"		case ARCHGLASS:\n"
"			return ArchGlassMaterial_GetPassThroughTransparency(material, hitPoint, localFixedDir, passThroughEvent TEXTURES_PARAM);\n"
"#endif\n"
"#if defined (PARAM_ENABLE_MAT_NULL)\n"
"		case NULLMAT:\n"
"			return NullMaterial_GetPassThroughTransparency(material, hitPoint, localFixedDir, passThroughEvent TEXTURES_PARAM);\n"
"#endif\n"
"		default:\n"
"			return DefaultMaterial_GetPassThroughTransparency(material, hitPoint, localFixedDir, passThroughEvent TEXTURES_PARAM);\n"
"	}\n"
"}\n"
"#endif\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Material_GetEmittedRadianceWithoutDynamic\n"
"//------------------------------------------------------------------------------\n"
"\n"
"float3 Material_GetEmittedRadianceWithoutDynamic(__global const Material *material, __global HitPoint *hitPoint\n"
"		TEXTURES_PARAM_DECL) {\n"
"	return DefaultMaterial_GetEmittedRadiance(material, hitPoint\n"
"		TEXTURES_PARAM);\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Material_GetInteriorVolumeWithoutDynamic\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#if defined(PARAM_HAS_VOLUMES)\n"
"uint Material_GetInteriorVolumeWithoutDynamic(__global const Material *material) {\n"
"	return DefaultMaterial_GetInteriorVolume(material);\n"
"}\n"
"#endif\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Material_GetExteriorVolumeWithoutDynamic\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#if defined(PARAM_HAS_VOLUMES)\n"
"uint Material_GetExteriorVolumeWithoutDynamic(__global const Material *material) {\n"
"	return DefaultMaterial_GetExteriorVolume(material);\n"
"}\n"
"#endif\n"
; } }
