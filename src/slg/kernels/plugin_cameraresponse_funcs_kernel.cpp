#include <string>
namespace slg { namespace ocl {
std::string KernelSource_plugin_cameraresponse_funcs = 
"#line 2 \"plugin_cameraresponse_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2015 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// CameraResponsePlugin_Apply\n"
"//------------------------------------------------------------------------------\n"
"\n"
"// Implementation of std::upper_bound()\n"
"__global const float *std_upper_bound(__global const float *first,\n"
"		__global const float *last, const float val) {\n"
"	__global const float *it;\n"
"	uint count = last - first;\n"
"	uint step;\n"
"\n"
"	while (count > 0) {\n"
"		it = first;\n"
"		step = count / 2;\n"
"		it += step;\n"
"\n"
"		if (!(val < *it)) {\n"
"			first = ++it;\n"
"			count -= step + 1;\n"
"		} else\n"
"			count = step;\n"
"	}\n"
"\n"
"	return first;\n"
"}\n"
"\n"
"float ApplyCrf(const float point, __global const float *from, __global const float *to,\n"
"		const uint size) {\n"
"	if (point <= from[0])\n"
"		return to[0];\n"
"	if (point >= from[size - 1])\n"
"		return to[size - 1];\n"
"\n"
"	const int index = std_upper_bound(from, from + size, point) - from;\n"
"	const float x1 = from[index - 1];\n"
"	const float x2 = from[index];\n"
"	const float y1 = to[index - 1];\n"
"	const float y2 = to[index];\n"
"	return mix(y1, y2, (point - x1) / (x2 - x1));\n"
"}\n"
"\n"
"float3 Map(__global const float *redI, __global const float *redB, const uint redSize\n"
"#if defined(PARAM_CAMERARESPONSE_COLOR)\n"
"		, __global const float *greenI, __global const float *greenB, const uint greenSize\n"
"		, __global const float *blueI, __global const float *blueB, const uint blueSize\n"
"#endif\n"
"		, const float3 rgb) {\n"
"	float3 result;\n"
"\n"
"#if defined(PARAM_CAMERARESPONSE_COLOR)\n"
"	result.s0 = ApplyCrf(rgb.s0, redI, redB, redSize);\n"
"	result.s1 = ApplyCrf(rgb.s1, greenI, greenB, greenSize);\n"
"	result.s2 = ApplyCrf(rgb.s2, blueI, blueB, blueSize);\n"
"#else\n"
"	const float y = Spectrum_Y(rgb);\n"
"	result = ApplyCrf(y, redI, redB, redSize);\n"
"#endif\n"
"\n"
"	return result;\n"
"}\n"
"\n"
"__kernel __attribute__((work_group_size_hint(256, 1, 1))) void CameraResponsePlugin_Apply(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global float *channel_RGB_TONEMAPPED,\n"
"		__global uint *channel_FRAMEBUFFER_MASK,\n"
"		__global const float *redI, __global const float *redB, const uint redSize\n"
"#if defined(PARAM_CAMERARESPONSE_COLOR)\n"
"		, __global const float *greenI, __global const float *greenB, const uint greenSize\n"
"		, __global const float *blueI, __global const float *blueB, const uint blueSize\n"
"#endif\n"
"		) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid > filmWidth * filmHeight)\n"
"		return;\n"
"\n"
"	const uint maskValue = channel_FRAMEBUFFER_MASK[gid];\n"
"	if (maskValue) {\n"
"		__global float *pixel = &channel_RGB_TONEMAPPED[gid * 3];\n"
"		const float3 pixelValue = (float3)(pixel[0], pixel[1], pixel[2]);\n"
"		\n"
"		const float3 newPixelValue = Map(\n"
"				redI, redB, redSize\n"
"#if defined(PARAM_CAMERARESPONSE_COLOR)\n"
"				, greenI, greenB, greenSize\n"
"				, blueI, blueB, blueSize\n"
"#endif\n"
"				, pixelValue);\n"
"\n"
"		pixel[0] = newPixelValue.s0;\n"
"		pixel[1] = newPixelValue.s1;\n"
"		pixel[2] = newPixelValue.s2;\n"
"	}\n"
"}\n"
; } }
