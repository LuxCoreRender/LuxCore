#include <string>
namespace slg { namespace ocl {
std::string KernelSource_plugin_coloraberration_funcs = 
"#line 2 \"plugin_vignetting_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2015 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// ColorAberrationPlugin_Apply\n"
"//------------------------------------------------------------------------------\n"
"\n"
"float3 ColorAberrationPlugin_BilinearSampleImage(\n"
"		__global float *channel_IMAGEPIPELINE,\n"
"		const uint width, const uint height,\n"
"		const float x, const float y) {\n"
"	const uint x1 = clamp(Floor2UInt(x), 0u, width - 1);\n"
"	const uint y1 = clamp(Floor2UInt(y), 0u, height - 1);\n"
"	const uint x2 = clamp(x1 + 1, 0u, width - 1);\n"
"	const uint y2 = clamp(y1 + 1, 0u, height - 1);\n"
"	const float tx = clamp(x - x1, 0.f, 1.f);\n"
"	const float ty = clamp(y - y1, 0.f, 1.f);\n"
"\n"
"	float3 c;\n"
"	c = ((1.f - tx) * (1.f - ty)) * VLOAD3F(&channel_IMAGEPIPELINE[(y1 * width + x1) * 3]);\n"
"	c += (tx * (1.f - ty)) * VLOAD3F(&channel_IMAGEPIPELINE[(y1 * width + x2) * 3]);\n"
"	c += ((1.f - tx) * ty) * VLOAD3F(&channel_IMAGEPIPELINE[(y2 * width + x1) * 3]);\n"
"	c += (tx * ty) * VLOAD3F(&channel_IMAGEPIPELINE[(y2 * width + x2) * 3]);\n"
"\n"
"	return c;\n"
"}\n"
"\n"
"__kernel __attribute__((work_group_size_hint(256, 1, 1))) void ColorAberrationPlugin_Apply(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global float *channel_IMAGEPIPELINE,\n"
"		__global uint *channel_FRAMEBUFFER_MASK,\n"
"		__global float *tmpBuffer,\n"
"		const float amount) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid >= filmWidth * filmHeight)\n"
"		return;\n"
"\n"
"	const uint maskValue = channel_FRAMEBUFFER_MASK[gid];\n"
"	if (maskValue) {\n"
"		const uint x = gid % filmWidth;\n"
"		const uint y = gid / filmWidth;\n"
"		const float nx = x / (float)filmWidth;\n"
"		const float ny = y / (float)filmHeight;\n"
"		const float xOffset = nx - .5f;\n"
"		const float yOffset = ny - .5f;\n"
"		const float tOffset = sqrt(xOffset * xOffset + yOffset * yOffset);\n"
"\n"
"		const float rbX = (.5f + xOffset * (1.f + tOffset * amount)) * filmWidth;\n"
"		const float rbY = (.5f + yOffset * (1.f + tOffset * amount)) * filmHeight;\n"
"		const float gX =  (.5f + xOffset * (1.f - tOffset * amount)) * filmWidth;\n"
"		const float gY =  (.5f + yOffset * (1.f - tOffset * amount)) * filmHeight;\n"
"\n"
"		const float3 redblue = (float3)(1.f, 0.f, 1.f);\n"
"		const float3 green = (float3)(0.f, 1.f, 0.f);\n"
"\n"
"		__global float *pixel = &channel_IMAGEPIPELINE[gid * 3];\n"
"		float3 newValue = VLOAD3F(pixel);\n"
"		newValue += redblue * ColorAberrationPlugin_BilinearSampleImage(channel_IMAGEPIPELINE, filmWidth, filmHeight, rbX, rbY);\n"
"		newValue += green * ColorAberrationPlugin_BilinearSampleImage(channel_IMAGEPIPELINE, filmWidth, filmHeight, gX, gY);\n"
"		// I added redblue+green luminance so I divide by 2.0 to go back\n"
"		// to original luminance\n"
"		newValue *= .5;\n"
"\n"
"		VSTORE3F(newValue, &tmpBuffer[gid * 3]);\n"
"	}\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// ColorAberrationPlugin_Copy\n"
"//------------------------------------------------------------------------------\n"
"\n"
"__kernel __attribute__((work_group_size_hint(256, 1, 1))) void ColorAberrationPlugin_Copy(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global float *channel_IMAGEPIPELINE,\n"
"		__global uint *channel_FRAMEBUFFER_MASK,\n"
"		__global float *tmpBuffer) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid >= filmWidth * filmHeight)\n"
"		return;\n"
"\n"
"	const uint maskValue = channel_FRAMEBUFFER_MASK[gid];\n"
"	if (maskValue) {\n"
"		const uint index = gid * 3;\n"
"\n"
"		channel_IMAGEPIPELINE[index] = tmpBuffer[index];\n"
"		channel_IMAGEPIPELINE[index + 1] = tmpBuffer[index + 1];\n"
"		channel_IMAGEPIPELINE[index + 2] = tmpBuffer[index + 2];\n"
"	}\n"
"}\n"
; } }
