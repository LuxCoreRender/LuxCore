#include <string>
namespace slg { namespace ocl {
std::string KernelSource_plugin_gaussianblur3x3_funcs = 
"#line 2 \"plugin_gaussianblur3x3_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2017 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// GaussianBlur3x3FilterPlugin_FilterX\n"
"//------------------------------------------------------------------------------\n"
"\n"
"void GaussianBlur3x3FilterPlugin_ApplyBlurFilterXR1(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global const float *src,\n"
"		__global float *dst,\n"
"		const float aF,\n"
"		const float bF,\n"
"		const float cF) {\n"
"	// Do left edge\n"
"	float3 a;\n"
"	float3 b = VLOAD3F(&src[0 * 3]);\n"
"	float3 c = VLOAD3F(&src[1 * 3]);\n"
"\n"
"	const float leftTotF = bF + cF;\n"
"	const float3 bLeftK = bF / leftTotF;\n"
"	const float3 cLeftK = cF / leftTotF;\n"
"	VSTORE3F(bLeftK  * b + cLeftK * c, &dst[0 * 3]);\n"
"\n"
"    // Main loop\n"
"	const float totF = aF + bF + cF;\n"
"	const float3 aK = aF / totF;\n"
"	const float3 bK = bF / totF;\n"
"	const float3 cK = cF / totF;\n"
"\n"
"	for (uint x = 1; x < filmWidth - 1; ++x) {\n"
"		a = b;\n"
"		b = c;\n"
"		c = VLOAD3F(&src[(x + 1) * 3]);\n"
"\n"
"		VSTORE3F(aK * a + bK  * b + cK * c, &dst[x * 3]);\n"
"    }\n"
"\n"
"    // Do right edge\n"
"	const float rightTotF = aF + bF;\n"
"	const float3 aRightK = aF / rightTotF;\n"
"	const float3 bRightK = bF / rightTotF;\n"
"	a = b;\n"
"	b = c;\n"
"	VSTORE3F(aRightK  * a + bRightK * b, &dst[(filmWidth - 1) * 3]);\n"
"}\n"
"\n"
"__kernel __attribute__((work_group_size_hint(256, 1, 1))) void GaussianBlur3x3FilterPlugin_FilterX(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global const float *src,\n"
"		__global float *dst,\n"
"		const float weight) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid >= filmHeight)\n"
"		return;\n"
"\n"
"	const float aF = weight;\n"
"	const float bF = 1.f;\n"
"	const float cF = weight;\n"
"\n"
"	const uint index = gid * filmWidth * 3;\n"
"	GaussianBlur3x3FilterPlugin_ApplyBlurFilterXR1(filmWidth, filmHeight,\n"
"			&src[index], &dst[index], aF, bF, cF);\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// GaussianBlur3x3FilterPlugin_FilterY\n"
"//------------------------------------------------------------------------------\n"
"\n"
"void GaussianBlur3x3FilterPlugin_ApplyBlurFilterYR1(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global const float *src,\n"
"		__global float *dst,\n"
"		const float aF,\n"
"		const float bF,\n"
"		const float cF) {\n"
"	// Do left edge\n"
"	float3 a;\n"
"	float3 b = VLOAD3F(&src[0 * 3]);\n"
"	float3 c = VLOAD3F(&src[filmWidth * 3]);\n"
"\n"
"	const float leftTotF = bF + cF;\n"
"	const float3 bLeftK = bF / leftTotF;\n"
"	const float3 cLeftK = cF / leftTotF;\n"
"	VSTORE3F(bLeftK  * b + cLeftK * c, &dst[0 * 3]);\n"
"\n"
"    // Main loop\n"
"	const float totF = aF + bF + cF;\n"
"	const float3 aK = aF / totF;\n"
"	const float3 bK = bF / totF;\n"
"	const float3 cK = cF / totF;\n"
"\n"
"    for (uint y = 1; y < filmHeight - 1; ++y) {\n"
"		const unsigned index = y * filmWidth;\n"
"\n"
"		a = b;\n"
"		b = c;\n"
"		c = VLOAD3F(&src[(index + filmWidth) * 3]);\n"
"\n"
"		VSTORE3F(aK * a + bK  * b + cK * c, &dst[index * 3]);\n"
"    }\n"
"\n"
"    // Do right edge\n"
"	const float rightTotF = aF + bF;\n"
"	const float3 aRightK = aF / rightTotF;\n"
"	const float3 bRightK = bF / rightTotF;\n"
"	a = b;\n"
"	b = c;\n"
"	VSTORE3F(aRightK  * a + bRightK * b, &dst[(filmHeight - 1) * filmWidth * 3]);\n"
"}\n"
"\n"
"__kernel __attribute__((work_group_size_hint(256, 1, 1))) void GaussianBlur3x3FilterPlugin_FilterY(\n"
"		const uint filmWidth, const uint filmHeight,\n"
"		__global const float *src,\n"
"		__global float *dst,\n"
"		const float weight) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid >= filmWidth)\n"
"		return;\n"
"\n"
"	const float aF = weight;\n"
"	const float bF = 1.f;\n"
"	const float cF = weight;\n"
"\n"
"	const uint index = gid * 3;\n"
"	GaussianBlur3x3FilterPlugin_ApplyBlurFilterYR1(filmWidth, filmHeight,\n"
"			&src[index], &dst[index], aF, bF, cF);\n"
"}\n"
; } }
